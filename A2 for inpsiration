import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms.functional as Ft
import torch.optim as optim
from torchvision import datasets, transforms

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()

        # Setting up convolution layers
        self.conv1 = nn.Conv2d(1,16,3)
        self.conv2 = nn.Conv2d(16, 32, 3)
        self.conv3 = nn.Conv2d(32,64,3)
        self.conv4 = nn.Conv2d(64, 128, 3)

        self.pool= nn.MaxPool2d(2,2)  #Using max pooling

        # My Fully connected layers
        self.fc1 = nn.Linear(512, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 11)      
                                          # 11 possible classes (11 possible results of the equations: 1,2,3,4,5,6,7,8,9,12,16) but using zero indexed here

       #Using drop-out to avoid overfitting
        self.dropout = nn.Dropout(0.5)


    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))  # Conv Layer 1
        x = self.pool(F.relu(self.conv2(x)))  # Conv Layer 2
        x = self.pool(F.relu(self.conv3(x)))  # Conv Layer 3
        x = self.pool(F.relu(self.conv4(x)))  # Conv Layer 4

        x = x.view(-1, 512)

        # Fully connected layers with ReLU activation, as well as drop out to avoid overfitting
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()

#Loss function + optimizer
criterion = nn.CrossEntropyLoss()

#using stochastic gradient descent with momentum
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)


train_transformations= transforms.Compose([
    transforms.RandomApply([transforms.RandomRotation(20)], p=0.5),
    transforms.RandomApply([transforms.RandomAffine(degrees=0, translate=(0.1, 0.1))], p=0.5)
])

#Using data augmentation helped improve my accuracy


#TRAINING
from torch.utils.data import DataLoader, TensorDataset
train_dataset = TensorDataset(x_tensor, y_tensor)
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)

for epoch in range(65):

    r_loss = 0.0
    for i,(inputs, labels) in enumerate(train_loader, 0):

        inputs = torch.stack([train_transformations(img) for img in inputs])
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)

        loss = criterion(outputs, labels)
        loss.backward() #compute gradients
        optimizer.step()

        # print statistics
        r_loss += loss.item()
        if i % 100 == 99:    # print every 100 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, r_loss / 100))
            r_loss = 0.0

print('Finished Training')

